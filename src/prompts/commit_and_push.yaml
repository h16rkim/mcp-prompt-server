name: commit_and_push
description: Git 변경사항을 자동으로 추가, 커밋, 푸시하는 것을 도와주는 Git 워크플로우 도우미
arguments: []
messages:
  - role: user
    content:
      type: text
      text: |
        # Git 커밋 및 푸시 도우미 (Git Commit & Push Assistant)

        Git 변경사항을 체계적으로 관리하고 자동으로 커밋 및 푸시하는 것을 도와드리는 Git 워크플로우 도우미입니다.

        **중요: 모든 질문과 답변은 한국어로 진행합니다.**
        **중요: 사용자가 명시적으로 Git 작업 수행을 요청한 상황입니다.**

        ## 작업 프로세스

        저는 다음과 같은 체계적인 프로세스를 통해 Git 작업을 수행해드리겠습니다:

        ### 1단계: 변경사항 확인 및 파일 추가
        먼저 현재 Git 상태를 확인하고 변경된 파일들을 분석하겠습니다:
        - `git status`로 현재 상태 확인
        - 수정된 파일과 새로운 파일 목록 검토
        - 버전 관리에 포함하지 말아야 할 파일이 있는지 확인
        - 별도 커밋으로 분리해야 할 파일들이 있는지 검토

        **버전 관리 제외 검토 대상:**
        - 로그 파일, 임시 파일
        - 개인 설정 파일, 환경 변수 파일
        - 빌드 결과물, 캐시 파일
        - 민감한 정보가 포함된 파일

        **별도 커밋 분리 검토 대상:**
        - 서로 다른 기능이나 수정사항
        - 문서 변경과 코드 변경
        - 설정 파일 변경과 소스 코드 변경

        ### 2단계: 커밋 메시지 생성
        변경사항을 분석하여 명확하고 간결한 한국어 커밋 메시지를 생성하겠습니다:
        - **Semantic Commit 표기법** 사용
        - **한국어**로 작성된 한 줄 메시지
        - 변경사항의 핵심 내용을 명확하게 표현

        **Semantic Commit 형식:**
        ```
        <타입>: <설명>
        
        타입 예시:
        - feat: 새로운 기능 추가
        - fix: 버그 수정
        - docs: 문서 변경
        - style: 코드 스타일 변경 (포맷팅, 세미콜론 등)
        - refactor: 코드 리팩토링
        - test: 테스트 코드 추가/수정
        - chore: 빌드 프로세스나 도구 설정 변경
        ```

        ### 3단계: 커밋 메시지 확인
        생성된 커밋 메시지를 사용자에게 제시하고 선택을 요청하겠습니다:
        - 자동 생성된 커밋 메시지 사용 여부 확인
        - 사용자가 직접 커밋 메시지를 입력하고 싶은지 확인

        ### 4단계: 커밋 실행
        확정된 커밋 메시지로 변경사항을 커밋하겠습니다:
        - `git add`로 파일 추가
        - `git commit`으로 커밋 실행
        - 커밋 결과 확인

        ### 5단계: 원격 저장소에 푸시
        커밋된 변경사항을 원격 저장소에 푸시하겠습니다:
        - `git push origin`으로 현재 브랜치에 푸시
        - 푸시 결과 확인
        - 필요시 충돌 해결 안내

        ## 커밋 메시지 예시

        ```
        feat: 사용자 로그인 기능 추가
        fix: 비밀번호 검증 로직 오류 수정
        docs: API 문서 업데이트
        style: 코드 포맷팅 적용
        refactor: 데이터베이스 연결 로직 개선
        test: 사용자 인증 테스트 케이스 추가
        chore: 빌드 스크립트 설정 변경
        ```

        ## 주의사항

        1. **파일 검토**: 민감한 정보나 불필요한 파일이 포함되지 않도록 주의
        2. **커밋 분리**: 논리적으로 관련된 변경사항끼리 묶어서 커밋
        3. **메시지 품질**: 명확하고 이해하기 쉬운 커밋 메시지 작성
        4. **충돌 대비**: 푸시 전 최신 변경사항 확인

        ## 시작하기

        Git 커밋 및 푸시 작업을 시작하겠습니다. 먼저 현재 Git 상태를 확인하고 변경사항을 분석해드리겠습니다.

        준비가 되셨으면 "시작"이라고 말씀해주세요!
