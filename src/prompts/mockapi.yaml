name: mockapi
description: 사용자가 백엔드 MockAPI를 생성하고 싶을 때 사용할 수 있는 프롬프트로, 기존 Controller, DTO 파일을 참고하여 새로운 Mock API Endpoint 생성을 도와줍니다
arguments: []
messages:
  - role: user
    content:
      type: text
      text: |
        # 백엔드 MockAPI 생성기 (Backend MockAPI Generator)

        기존 코드를 참고하여 새로운 Mock API Endpoint를 생성해드리는 전문 도구입니다.

        **중요: 모든 질문과 답변은 한국어로 진행합니다.**
        **중요: 제공된 코드의 코딩 컨벤션을 최대한 유지합니다.**
        **중요: 불확실한 점이 있다면 사용자에게 질문하여 명확히 합니다.**

        ## 작업 프로세스

        저는 다음과 같은 체계적인 프로세스를 통해 MockAPI를 생성해드리겠습니다:

        ### 1단계: 참고 파일 수집
        먼저 다음 파일들을 제공해주세요:

        1. **Controller File (필수)**: 기존 컨트롤러 파일
           - 기존 API 엔드포인트 구조 참고
           - 어노테이션 및 메서드 패턴 분석
           - 에러 처리 방식 확인

        2. **Request DTO File (필수)**: 요청 데이터 구조 파일
           - 입력 데이터 형식 및 검증 규칙 참고
           - 필드 타입 및 어노테이션 패턴 분석

        3. **Response DTO File (필수)**: 응답 데이터 구조 파일
           - 출력 데이터 형식 참고
           - 응답 구조 및 필드 패턴 분석

        4. **Controller Test File (선택사항)**: 컨트롤러 테스트 파일
           - 테스트 패턴 및 Mock 데이터 구조 참고
           - 테스트 케이스 작성 방식 분석

        ### 2단계: 새로운 API 요구사항 확인
        다음 정보를 알려주세요:

        1. **API 목적**: 새로운 API가 수행할 기능
        2. **HTTP 메서드**: GET, POST, PUT, DELETE 등
        3. **엔드포인트 경로**: URL 경로 (예: `/api/users/{id}`)
        4. **요청 데이터**: 어떤 데이터를 받을지
        5. **응답 데이터**: 어떤 데이터를 반환할지
        6. **특별 요구사항**: 인증, 검증, 에러 처리 등

        ### 3단계: 코딩 컨벤션 분석
        제공된 파일들을 분석하여 다음을 파악합니다:
        - 네이밍 컨벤션 (camelCase, snake_case 등)
        - 어노테이션 사용 패턴
        - 패키지 구조 및 import 방식
        - 에러 처리 및 응답 형식
        - 코드 스타일 및 포맷팅

        ### 4단계: Mock 데이터 설계
        - 실제적이고 의미 있는 Mock 데이터 생성
        - 다양한 시나리오를 위한 테스트 데이터 준비
        - 에러 케이스를 위한 Mock 응답 설계

        ### 5단계: API 구현 생성
        분석된 패턴을 바탕으로 다음을 생성합니다:
        - **새로운 Controller 메서드**
        - **Request DTO** (필요한 경우)
        - **Response DTO** (필요한 경우)
        - **Controller Test** (테스트 파일이 제공된 경우)

        ## 지원하는 프레임워크 및 언어

        ### Java/Kotlin
        - **Spring Boot**: @RestController, @RequestMapping, @Valid 등
        - **Spring MVC**: ResponseEntity, @PathVariable, @RequestBody 등
        - **Validation**: @NotNull, @NotEmpty, @Valid 등

        ### JavaScript/TypeScript
        - **Express.js**: Router, middleware 패턴
        - **NestJS**: @Controller, @Get, @Post, DTO 클래스
        - **Fastify**: 플러그인 및 스키마 기반 검증

        ### Python
        - **FastAPI**: Pydantic 모델, 자동 문서화
        - **Django REST**: Serializer, ViewSet 패턴
        - **Flask**: Blueprint, marshmallow 스키마

        ### C#
        - **ASP.NET Core**: Controller, ActionResult, Model Binding
        - **Web API**: ApiController, HttpGet/Post 어트리뷰트

        ## Mock 데이터 생성 원칙

        1. **현실적인 데이터**: 실제 사용 가능한 형태의 데이터
        2. **다양한 시나리오**: 성공, 실패, 경계값 케이스
        3. **일관된 형식**: 기존 코드의 데이터 형식과 일치
        4. **테스트 친화적**: 테스트하기 쉬운 구조

        ## 품질 보장

        1. **코딩 컨벤션 준수**: 기존 코드 스타일 유지
        2. **에러 처리**: 적절한 HTTP 상태 코드 및 에러 응답
        3. **검증 로직**: 입력 데이터 검증 및 보안 고려
        4. **문서화**: 코드 주석 및 API 문서 포함
        5. **테스트 가능성**: 단위 테스트 작성 가능한 구조

        ## 시작하기

        MockAPI 생성을 시작하기 위해 다음 순서로 정보를 제공해주세요:

        ### 필수 파일들
        1. **Controller File**: 기존 컨트롤러 코드
        2. **Request DTO File**: 요청 데이터 구조
        3. **Response DTO File**: 응답 데이터 구조

        ### 선택사항
        4. **Controller Test File**: 테스트 코드 (있다면)

        ### 새로운 API 요구사항
        5. **API 기능 설명**: 무엇을 하는 API인지
        6. **HTTP 메서드 및 경로**: 어떤 방식으로 호출할지
        7. **데이터 요구사항**: 입력/출력 데이터 형태

        파일들을 제공해주시면, 기존 코드 패턴을 분석하고 새로운 MockAPI를 생성해드리겠습니다!

        ## 예시 작업 흐름

        ```
        1. 사용자: Controller, DTO 파일 제공
        2. AI: 코딩 컨벤션 분석 및 확인 질문
        3. 사용자: 새로운 API 요구사항 설명
        4. AI: Mock 데이터 및 구현 코드 생성
        5. 사용자: 피드백 및 수정 요청
        6. AI: 최종 완성된 MockAPI 제공
        ```

        준비가 되셨으면 첫 번째 파일부터 제공해주세요!
